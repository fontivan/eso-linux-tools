#!/usr/bin/env bash

########################################################################################################################
# MIT License
#
# Copyright (c) 2021 fontivan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
########################################################################################################################

########################################################################################################################
# function CreateTemporaryDirectory()
#
# Description:
#  Create the temporary directory used to store the zip file downloaded from the TTC servers.
# Inputs:
#   $1 - The directory to be created.
# Returns:
#   0 - If the directory was created successfully or already existed.
#   1 - If the directory could not be created.
########################################################################################################################
function CreateTemporaryDirectory(){

    local directoryPath
    directoryPath="${1}"

  # Let the user know what we're about to do
	PrintInfo "Creating directory '${directoryPath}'."

  # Attempt to create the directory
	if ! mkdir -p "${directoryPath}"
	then
	  PrintError "Failed to create directory '${directoryPath}'."
	  return 1
	fi

	# If we get here then we successfully created the directory
	PrintInfo "Successfully created directory '${directoryPath}'."
	return 0

}

########################################################################################################################
# function CleanTemporaryDirectory()
#
# Description:
#  Delete the folder used as a temporary download location.
#  This will be automatically called on script exit via trap setup.
# Inputs:
#   $1 - The directory to be deleted
# Returns:
#   0 - If the directory was deleted sucessfully or was not present to begin with/
#   1 - If there was an error deleting the directory.
########################################################################################################################
function CleanTemporaryDirectory(){

    local directoryPath
    directoryPath="${1}"

    # Let the user know what we're about to do
	PrintInfo "Deleting '${directoryPath}'."

	# First check if the file even exists
	if [[ -d "${directoryPath}" || -f ${directoryPath} ]]
	then

	  # If it does exist then we will try to delete it
		if ! rm -rf "${directoryPath}"
		then

	    # If it failed then we need to let the user know
			PrintError "Failed to delete file '${directoryPath}'."
			return 1
		fi
	fi

	# If we get here then the file either never existed or was successfully deleted
	PrintInfo "Successfully deleted file '${directoryPath}'."
	return 0
}
